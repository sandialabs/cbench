# -*-Shell-script-*-
# vim: syntax=sh tabstop=4
#
# This file contains common support for bash based
# scripts used in the Step 1, 2, 3 breakfix infrastructure
###############################################################################
#    Copyright (2005) Sandia Corporation.  Under the terms of Contract
#    DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
#    certain rights in this software
#
#    This file is part of Cbench.
#
#    Cbench is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    Cbench is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Cbench; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
###############################################################################

get_step1_node_list ()
{
	if [ -z $FIXIT123_STEP1_NODELIST_FILE ]; then
		STEP1_NODE_LIST=`showres -n | grep -P 'STEP1' | awk '{print $1}' | grep -P 'n' `
	else
		STEP1_NODE_LIST=`cat $FIXIT123_STEP1_NODELIST_FILE`
	fi
}

check_node_in_step1()
{
	local NODE=$1

	if [ -z $FIXIT123_STEP1_NODELIST_FILE ]; then
		if [ -z $2 ]; then
			showres -n | grep -q -P "$NODE\s+.*STEP1" 
			return $?
		else
			# someone passed in cached showres data
			grep -q -P "$NODE\s+.*STEP1"  $2
			return $?
		fi
	else
		egrep -q $NODE$ $FIXIT123_STEP1_NODELIST_FILE
		return $?
	fi
	return 1
}


get_step2_node_list ()
{
	if [ -z $FIXIT123_STEP2_NODELIST_FILE ]; then
		STEP2_NODE_LIST=`showres -n | grep -P 'STEP2' | awk '{print $1}' | grep -P 'n' `
	else
		STEP2_NODE_LIST=`cat $FIXIT123_STEP2_NODELIST_FILE`
	fi
}

check_node_in_step2()
{
	local NODE=$1

	if [ -z $FIXIT123_STEP2_NODELIST_FILE ]; then
		if [ -z $2 ]; then
			showres -n | grep -q -P "$NODE\s+.*STEP2" 
			return $?
		else
			# someone passed in cached showres data
			grep -q -P "$NODE\s+.*STEP2"  $2
			return $?
		fi
	else
		egrep -q $NODE$ $FIXIT123_STEP2_NODELIST_FILE
		return $?
	fi
	return 1
}

get_step3_node_list ()
{
	if [ -z $FIXIT123_STEP3_NODELIST_FILE ]; then
		STEP3_NODE_LIST=`showres -n | grep -P 'STEP3' | awk '{print $1}' | grep -P 'n' `
	else
		STEP3_NODE_LIST=`cat $FIXIT123_STEP3_NODELIST_FILE`
	fi
}

check_node_in_step3()
{
	local NODE=$1

	if [ -z $FIXIT123_STEP3_NODELIST_FILE ]; then
		if [ -z $2 ]; then
			showres -n | grep -q -P "$NODE\s+.*STEP3" 
			return $?
		else
			# someone passed in cached showres data
			grep -q -P "$NODE\s+.*STEP3"  $2
			return $?
		fi
	else
		egrep -q $NODE$ $FIXIT123_STEP3_NODELIST_FILE
		return $?
	fi
	return 1
}


steplogentry ()
{
	local TIMESTAMP_CMD="date +%m/%d/%y"
	local DATESTAMP_CMD="date +%H:%M"

	# get a timestamp
	local TSTAMP=`$TIMESTAMP_CMD`
	local DSTAMP=`$DATESTAMP_CMD`

	if [ ! -f $2 ]; then
		local LOGDIR=`dirname $2`
		mkdir -p $LOGDIR
		chown $FIXIT123_USER.$FIXIT123_USER $LOGDIR
		touch $2
		chown $FIXIT123_USER.$FIXIT123_USER $2
	fi

	echo "$TSTAMP $DSTAMP $1" >> $2
	echo "$TSTAMP $DSTAMP $1"

	if [ ! -z $3 ]; then
		if [ ! -f $3 ]; then
			local LOGDIR=`dirname $3`
			mkdir -p $LOGDIR
			chown $FIXIT123_USER.$FIXIT123_USER $LOGDIR
			touch $3
			chown $FIXIT123_USER.$FIXIT123_USER $3
		fi
		echo "$TSTAMP $DSTAMP $1" >> $3
	fi
}

check_for_step1_pausefile()
{
	local pausefile=$FIXIT123_HOME/step1_pausefile

	if [ ! -z $FIXIT123_STEP1_PAUSEFILE ]; then
		pausefile=$FIXIT123_STEP1_PAUSEFILE
	fi

	# check for the STEP1 pause file which will diable our operation
	if [ -f "$pausefile" ]; then
		echo "Step1 scripts are currently disabled."
		cat $pausefile
		exit 1
	fi
}

check_for_step2_pausefile()
{
	local pausefile=$FIXIT123_HOME/step2_pausefile

	if [ ! -z $FIXIT123_STEP2_PAUSEFILE ]; then
		pausefile=$FIXIT123_STEP2_PAUSEFILE
	fi

	# check for the STEP2 pause file which will diable our operation
	if [ -f "$pausefile" ]; then
		echo "Step2 scripts are currently disabled."
		cat $pausefile
		exit 1
	fi
}

check_for_step3_pausefile()
{
	local pausefile=$FIXIT123_HOME/step3_pausefile

	if [ ! -z $FIXIT123_STEP3_PAUSEFILE ]; then
		pausefile=$FIXIT123_STEP3_PAUSEFILE
	fi

	# check for the STEP3 pause file which will diable our operation
	if [ -f "$pausefile" ]; then
		echo "Step3 scripts are currently disabled."
		cat $pausefile
		exit 1
	fi
}

disable_interconnect_port()
{
	local node=$1

	if [ -z $FIXIT123_DOWNPORT_CMD ]; then
		# nothing to do since no downport command defined
		/bin/false
		return 1
	fi
	if [ "$FIXIT123_DOWNPORT_CMD" == "DISABLED" ]; then
		# nothing to do since downport command disabled
		/bin/false
		return 1
	fi

	echo "Disabling interconnect port"
	$FIXIT123_DOWNPORT_CMD $node > /dev/null
	return $?
}

enable_interconnect_port()
{
	local node=$1

	if [ -z $FIXIT123_UPPORT_CMD ]; then
		# nothing to do since no downport command defined
		/bin/false
		return 1
	fi
	if [ "$FIXIT123_UPPORT_CMD" == "DISABLED" ]; then
		# nothing to do since downport command disabled
		/bin/false
		return 1
	fi

	echo "Enabling interconnect port"
	$FIXIT123_UPPORT_CMD $node > /dev/null
	return $?
}
