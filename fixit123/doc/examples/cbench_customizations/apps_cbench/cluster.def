#!/usr/bin/perl

###############################################################################
#    Copyright (2005) Sandia Corporation.  Under the terms of Contract
#    DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
#    certain rights in this software
#
#    This file is part of Cbench.
#
#    Cbench is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    Cbench is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Cbench; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
###############################################################################


# String to identify the cluster
$cluster_name = "tbird";

# Total number of processors in the cluster to build/run benchmarks on
$max_procs = 8192;

# Total number of nodes in the cluster
$max_nodes = 4096;

# The max number of processors available at a given level of processor-per-
# node (aka, ppn) usage. In other words, how many processors are available
# when using 1ppn, 2ppn, etc..
%max_ppn_procs = (
	'1' => 4096,
	'2' => 8192,
);

# The raw (i.e. how much do the DIMMs add up to) amount of RAM available
# PER NODE.
#
# This is specified in MBytes.  So 1GB is specified as 1024 for example.
$memory_per_node = 6144;
$memory_per_processor = 3072;

# Benchmarks/tests/test sets may use this array to generate parameters for
# various jobs. At least a single value should be present. For normal linux,
# 80% is a good starting point. Multiple comma separated values can be specified
# to generate more test permutations using different amounts of memory.
# Currently only the Linpack test set uses this.
#@memory_util_factors = (0.684);
@memory_util_factors = (0.15,0.50,0.70);
#@memory_util_factors = (0.25);

# Select the parallel job launch mechanism. The job launch mechanism
# must be correctly supported in cbench.pl.
#
# NOTE: This is not necessarily the name of the job launching binary,
#       just the name of a configuration.
$joblaunch_method = "mpiexec";
#$joblaunch_method = "mpirun";

# optional parameter to specify the exact binary, including path,
# used for job launching
#
# NOTE: The binary must behave correctly with respect to what the
#       $joblaunch_method setting specifies. So you can specify
#       "/home/bob/bobcmd" here but it better behave like
#       $joblaunch_method expects it too.... or else....
$joblaunch_cmd = "";
#$joblaunch_cmd = "mpirun_rsh";
#$joblaunch_cmd = "/apps/x86_64/mpi/mvapich/gcc-3.4.3-9/mvapich.095.06262005.large.cluster.barrierfix.viadebug/bin/mpirun_rsh";

# optional parameter to add extra arguments to the launch command line
$joblaunch_extraargs = "-v";
#$joblaunch_extraargs = "-ssh -hostfile \$PPN2 -paramfile /projects/tbird/jbogden/env-mpi/env-vars3-intel.param ";
#$joblaunch_extraargs = "-ssh -hostfile \$PPN1 -paramfile /projects/tbird/jbogden/env-mpi/env-vars3-intel.param ";

# Select the batch system to use
$batch_method = "torque";

# optional parameter to set the exact binary, including path, used
# for batch system submissions
#
# NOTE: This binary must behave like the setting for $batch_method expects
#       it too...
$batch_cmd = "qsub.real";

# optional parameter to add extra arguments to the batch command line
#$batch_extraargs = "";
$batch_extraargs = "-V";
#$batch_extraargs = "-V ";
#$batch_extraargs = "-V -W x=FLAGS:ADVRES:ECCNODES.55 ";

# Select the remote command execution method to use
$remotecmd_method = "pdsh";

# optional parameter to add extra arguments to the remote execution command line
$remotecmd_extraargs = "-f 700";

# The NODEHWTEST test set provides node-level testing capabilities within Cbench.
# Some of the hw_test modules (see perllib/hw_test) that are used require and/or
# work best with root priveleges. There are three scenarios for how these
# tests are run: 1) the entire testing process is run as root 2) none of the
# testing process is run as root (and thus some of the hw_test modules may not
# work very well) 3) most of the test process is run as non-root and the specific
# hw_test modules that require or like root privs will run as root.
#
# To enable case #3, set the $run_as_root parmeter to 'true' or 1 and
# set the $run_as_root_cmd to the string that will be used to run commands
# with root priveleges. This will usually be some form of 'sudo' command.
$run_as_root = 1;
$run_as_root_cmd = "sudo -u root";

#
# This section controls custom parse filters that will optionally be
# employed by the Cbench output parsers when looking at job output.
# With these filters, the user can dynamically tell the output parsers
# to look for user-defined errors. These filters are only used when
# the --customparse parameter is given to the *_output_parse.pl scripts.
#
# Each filter is composed of a key/value pair.  The key is is a Perl
# regular expression including capturing. The value is a string that will
# be used to identify when an occurrence of the regex is found. The value
# can include the $1,$2,... etc variables that would be captured by
# the Perl regular expression
%parse_filters = (
	'Abort: .* code=VAPI_RETRY_EXC_ERR,.*dest rank=\[(\S+):\d+\]' =>
		'VAPI_RETRY_EXC_ERR, dest= $1',

	'Abort: \[(\S+)[\:]*[\d+]*\]\s*[\:]*.*asynchronous event: (\S+) \((\S+)\)' =>
		'$2 ($3) on $1',

	'Abort: .*asynchronous event: (\S+) \((\S+)\)' =>
		'$1 ($2)',

	'Abort: \[(.*)\][ :]* .*Got completion with error, code=(\S+), vendor code=(\S+) dest rank=\[(\S+):\d+\]' =>
		'$2, dest= $4',

	'Abort: VAPI_register_mr' =>
		'VAPI_register_mr ERROR',

	'Abort:\s+\[(\S+)\].*HCA.*Local Catastrophic Error' =>
		'HCA Catasrophic on $1',

	'Abort:\s+\[(\S+)\].*Cannot allocate CQ\s+(\(.*\))' =>
		'Cannot allocate CQ ($2) on $1',

	'(\[\d+\]\s+setting QP.*NON-ACTIVE .*LID \d+)' =>
		'$1',

	'PBS: job killed: node (\d+) \((\S+)\) requested job die, code (\d+)' =>
		'PBS JOB DIE REQUEST, node $2 code=$3',

	'PBS: job killed: walltime.*exceeded limit' =>
		'PBS JOB WALLTIME EXCEEDED',

	'mpiexec:\s+Warning:\s+task\s+(\d+)\s+died\s+with\s+signal\s+(\S+)\s+\((.*)\)' =>
		'MPIEXEC WARNING: TASK DIED, signal ($3) from task $1',

	'mpiexec:\s+Warning:\s+tasks\s+(\S+)\s+died\s+with\s+signal\s+(\S+)\s+\((.*)\)' =>
		'MPIEXEC WARNING: TASKS DIED, signal ($3) from tasks $1',

	'mpiexec:\s+killall:\s+caught signal\s+(\S+)\s+\((.*)\)' =>
		'MPIEXEC KILLALL: signal ($2)',
	
	'\[(\d+)\]\s+Abort:\s+Cannot allocate CQ \(Generic error\)' =>
		'CQ (Generic error) task $1',
);

1;

# vim: syntax=perl
