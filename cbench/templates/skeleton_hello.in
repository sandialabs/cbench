# Generic example/skeleton job template file
#
# This shows the basic way to build a job template file
# that.  The job templates are where Cbench expects the smarts
# to be to run the MPI job in question.  The job templates are
# combined with appropriate batch/interative templates and common
# header/footer templates to generate actual batch and SHell scripts
# that will be used to execute MPI jobs.
#
# The job templates use various keystrings that get replaced at
# generation time (i.e. when *_gen_jobs.pl scripts are invoked)
# to deal with runtime variables and other configuration controlled
# variable elements such as job launching commands and the path
# to Cbench compiled binaries.
#
# Here is a not necessarily exhaustive list of keystrings variables
# you might use:
#     CBENCHOME_HERE
#     CBENCHTEST_HERE
#     CBENCHTEST_BIN_HERE
#     TESTSET_PATH_HERE
#     RUN_TYPE_HERE
#     JOBLAUNCHMETHOD_HERE
#     WALLTIME_HERE
#     NUM_PROC_HERE
#     NUM_PROCS_HERE
#     NUM_NODES_HERE
#     NUM_PPN_HERE
#     JOBNAME_HERE
#     IDENT_HERE
#     TORQUE_NODESPEC_HERE
#     JOBLAUNCH_CMD_HERE
#     TESTSET_NAME_HERE
#
# NOTE: bash syntax is used and required here


# here we construct the command line to run a hello world MPI binary
CMD="JOBLAUNCH_CMD_HERE CBENCHTEST_BIN_HERE/mpi_hello"

# here is an example of a more complicated command line
# CMD="JOBLAUNCH_CMD_HERE CBENCHTEST_BIN_HERE/IMB-MPI1 -npmin NUM_PROCS_HERE sendrecv"

# Here we run the command line we built using a Cbench function that
# deals with the complexities of capturing STDOUT/STDERR output from
# the MPI command. The complexity comes in because a Cbench job template
# will be used to generate batch jobs and interactive jobs.  STDOUT/
# STDERR output generally ends up in different places in the two
# job execution modes.  If you use the cbench_run_cmd() function,
# you won't have to worry about it...
cbench_run_cmd $CMD

